//******..1..Find first and last positions of an element in a sorted array

#include <bits/stdc++.h>
using namespace std;

void farstlastposition(vector<int> nums, int t)
{
    int fast = -1, last = -1;
    for (int i = 0; i < nums.size(); i++)
    {
        if (nums[i] != t)
        {
            continue;
        }
        if (fast == -1)
        {
            fast = i;
        }
        last = i;
    }
    if (fast != -1 && last != fast)
    {
        cout << fast << " , " << last;
    }
    else if (last == fast && fast >= 0)
    {
        cout << fast;
    }
    else
    {
        cout << "not found : ";
    }
}

int main()
{
    vector<int> v = {1, 2, 2, 2, 2, 3, 4, 7, 8, 8};
    cout << " input ";
    int c;
    cin >> c;
    farstlastposition(v, c);

    return 0;
}



// *****...2..Find a Fixed Point (Value equal to index) in a given array

#include <bits/stdc++.h>
using namespace std;

void fixedpoint(vector<int> arr)
{
    for (int i = 0; i < arr.size(); i++)
    {
        if (arr[i] == (i + 1))
        {
            cout << " index " << (i + 1) << " value = " << arr[i];
            break;
        }
    }
}

int main()
{
    vector<int> arr = {3, 23, 45, 4, 87};
    fixedpoint(arr);

    return 0;
}



// *****...3..Search in a rotated sorted array

#include <bits/stdc++.h>
using namespace std;
int binarySearch(int arr[], int low, int high, int key)
{
    if (high < low)
        return -1;

    int mid = (low + high) / 2;
    if (key == arr[mid])
        return mid;

    if (key > arr[mid])
        return binarySearch(arr, (mid + 1), high, key);

    return binarySearch(arr, low, (mid - 1), key);
}

int findPivot(int arr[], int low, int high)
{

    if (high < low)
        return -1;
    if (high == low)
        return low;

    int mid = (low + high) / 2;
    if (mid < high && arr[mid] > arr[mid + 1])
        return mid;

    if (mid > low && arr[mid] < arr[mid - 1])
        return (mid - 1);

    if (arr[low] >= arr[mid])
        return findPivot(arr, low, mid - 1);

    return findPivot(arr, mid + 1, high);
}

int pivotedBinarySearch(int arr[], int n, int key)
{
    int pivot = findPivot(arr, 0, n - 1);

    if (pivot == -1)
        return binarySearch(arr, 0, n - 1, key);

    if (arr[pivot] == key)
        return pivot;

    if (arr[0] <= key)
        return binarySearch(arr, 0, pivot - 1, key);

    return binarySearch(arr, pivot + 1, n - 1, key);
}

int main()
{

    int arr1[] = {4, 5, 6, 7, 0, 1, 2};
    int n = sizeof(arr1) / sizeof(arr1[0]);
    int key;
    cin >> key;

    cout << "Index of the element is : "
         << pivotedBinarySearch(arr1, n, key);

    return 0;
}




// ****...4..square root of an integer


#include <bits/stdc++.h>
using namespace std;

int countSquares(int x)
{
    int sqr = sqrt(x);
    int result = (int)(sqr);
    return result;
}
int main()
{

    int x;
    cin >> x;
    cout << (countSquares(x));

    return 0;
}




// ****...5..Maximum and minimum of an array using minimum number of comparisons
#include <bits/stdc++.h>
using namespace std;

int main()
{
    int arr[] = {1000, 11, 445, 330, 3000};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_val = 0;
    int min_val = arr[0];
    for (int i = 0; i < n; i++)
    {
        min_val = min(min_val, arr[i]);
        max_val = max(max_val, arr[i]);
    }
    cout << "max val = " << max_val << endl
         << "min val = " << min_val;

    return 0;
}




// ****...7..Find the repeating and the missing

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int arr[] = {1, 3, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    unordered_map<int, bool> nums;
    for (int i : arr)
    {
        if (nums.find(i) == nums.end())
        {
            nums[i] = true;
        }
        else
        {
            cout << "Repeating = " << i;
        }
    }
    cout << endl;

    for (int i = 1; i <= n; i++)
    {
        if (nums.find(i) == nums.end())
        {
            cout << "Missing = " << i;
        }
    }

    return 0;
}




// ***...8..find majority element
#include <bits/stdc++.h>
using namespace std;

int find(int arr[], int n)
{
    int max_count = 0;
    int index = -1;
    for (int i = 0; i < n; i++)
    {
        int count = 0;
        for (int j = 0; j < n; j++)
        {
            if (arr[i] == arr[j])
            {
                count++;
            }
        }
        if (count > max_count)
        {
            max_count = count;
            index = i;
        }
    }
    if (max_count > n / 2)
    {
        cout << "majority array : " << arr[index];
    }
    else
    {
        cout << "not  majority array";
    }
}

int main()
{

    int arr[] = {1, 1, 2, 1, 3, 5, 1,5,5,5,5,5,5,5,5,5,5,5,5,};
    int n = sizeof(arr) / sizeof(arr[0]);

    find(arr, n);

    return 0;
}



// ***...9..Searching in an array where adjacent differ by at most k

#include <bits/stdc++.h>
using namespace std;

int search(int arr[], int n, int x, int k)
{
    int i = 0;
    while (i < n)
    {
        if (arr[i] == x)
        {
            return i;
        }
        i = i + max(1, abs(x - arr[i]) / k);
    }
    cout << "not found : ";
    return -1;
}

int main()
{
    int arr[] = {2, 4, 5, 7, 7, 6};
    int x;
    int k;
    cout << "enter x and k : ";
    cin >> x >> k;
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Element " << x << " is present at index "
         << search(arr, n, x, k);

    return 0;
}


// ***...10..find a pair with a given difference
#include <bits/stdc++.h>
using namespace std;

void search(int arr[], int n, int x)
{
    int count = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = i; j < n; j++)
        {
            if (abs(arr[i] - arr[j]) == x)
            {
                count++;
                cout << arr[i] << " , " << arr[j] << endl;
            }
        }
    }
    if (count > 0)
    {
        cout << count;
    }
    else
    {
        cout << "not found : ";
    }
}

int main()
{
    int arr[] = {5, 20, 3, 2, 17, 80};
    int n = sizeof(arr) / sizeof(arr[0]);
    int x;
    cout << "enter element : ";
    cin >> x;
    search(arr, n, x);

    return 0;
}



// ***...12..Stickler Thief
#include <bits/stdc++.h>
using namespace std;

int findmaxmoney(int *arr, int n)
{
    if (n == 0)
        return 0;
    int val1 = arr[0];
    if (n == 1)
    {
        return val1;
    }
    int val2;
    val2 = max(arr[0], arr[1]);
    if (n == 2)
    {
        return val2;
    }
    int max_val;
    for (int i = 2; i < n; i++)
    {
        max_val = max(arr[i] + val1, val2);
        val1 = val2;
        val2 = max_val;
    }

    return max_val;
}

int main()
{
    int arr[] = {5, 5, 10, 100, 10, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "max money is : " << findmaxmoney(arr, n);

    return 0;
}



// ***...13..Count triplet with sum smaller than a given value

#include <bits/stdc++.h>
using namespace std;
int searchcount(int arr[], int n, int sum)
{
    int count = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = i; j < n; j++)
        {
            for (int k = 2; k < n; k++)
            {
                if (arr[i] + arr[j] + arr[k] == sum)
                    count++;
            }
        }
    }
    return count;
    
}

int main()
{
    // int arr[] = {5, 1, 3, 4, 7};
    int arr[]={-2, 0, 1, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 2;
    cout << "max count : " << searchcount(arr, n, sum);

    return 0;
}




// ***...14..merge 2 sorted arrays
#include <bits/stdc++.h>
using namespace std;

void margesortedarray(int arr1[], int arr2[], int n1, int n2)
{
    vector<int> v;
    for (int i = 0; i < n1; i++)
    {
        v.push_back(arr1[i]);
    }
    for (int i = 0; i < n2; i++)
    {
        v.push_back(arr2[i]);
    }
    sort(v.begin(), v.end());
    for (int i = 0; i < v.size(); i++)
    {
        cout << v[i] << " ";
    }
}

int main()
{
    int arr1[] = {1, 3, 5, 7};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);

    int arr2[] = {2, 4, 6, 8};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    margesortedarray(arr1, arr2, n1, n2);

    return 0;
}



// ***...15..print all subarrays with 0 sum
#include <bits/stdc++.h>
using namespace std;

vector<pair<int, int>> findarray(int arr[], int n)
{
    vector<pair<int, int>> va;
    for (int i = 0; i < n; i++)
    {
        int sum = 0;
        for (int j = i; j < n; j++)
        {
            sum += arr[j];
            if (sum == 0)
            {
                va.push_back({i, j});
            }
        }
    }
    return va;
}
void display(vector<pair<int, int>> va)
{
    for (auto it = va.begin(); it != va.end(); it++)
    {
        cout << "Subarray found from Index " << it->first
             << " to " << it->second << endl;
    }
}

int main()
{
    int arr[] = {6, 3, -1, -3, 4, -2, 2, 4, 6, -12, -7};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Function Call
    vector<pair<int, int>> output = findarray(arr, n);

    // if we didn’t find any subarray with 0 sum,
    // then subarray doesn’t exists
    if (output.size() == 0)
    {
        cout << "No subarray exists";
    }
    else
    {
        display(output);
    }
    return 0;
}



// ***...16...Product array Puzzle
#include <bits/stdc++.h>
using namespace std;

void findarray(int arr[], int n)
{
    vector<int> v;

    for (int i = 0; i < n; i++)
    {
        int pro = 1;
        for (int j = 0; j < n; j++)

        {
            if (i == j)
                continue;
            pro = pro * arr[j];
        }

        v.push_back(abs(pro));
    }
    for (auto it : v)
    {
        cout << it << " ";
    }
}

int main()
{
    int arr[] = {10, 3, 5, 6, 2};
    int n = sizeof(arr) / sizeof(arr[0]);
    // cout << n;
    findarray(arr, n);

    return 0;
}




// ***...17..Sort array according to count of set bits
#include <bits/stdc++.h>
using namespace std;

int setBitCount(int num)
{
    int count = 0;
    while (num)
    {
        if (num & 1)
            count++;
        num >>= 1;
    }
    return count;
}

void sortBySetBitCount(int arr[], int n)
{
    multimap<int, int> count;
    for (int i = 0; i < n; ++i)
    {
        count.insert({(-1) *
                          setBitCount(arr[i]),
                      arr[i]});
    }

    for (auto i : count)
        cout << i.second << " ";
    cout << "\n";
}

int main()
{

    int arr[] = {1, 2, 3, 4, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    sortBySetBitCount(arr, n);

    return 0;
}



















