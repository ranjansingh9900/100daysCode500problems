//******..1..Find first and last positions of an element in a sorted array

#include <bits/stdc++.h>
using namespace std;

void farstlastposition(vector<int> nums, int t)
{
    int fast = -1, last = -1;
    for (int i = 0; i < nums.size(); i++)
    {
        if (nums[i] != t)
        {
            continue;
        }
        if (fast == -1)
        {
            fast = i;
        }
        last = i;
    }
    if (fast != -1 && last != fast)
    {
        cout << fast << " , " << last;
    }
    else if (last == fast && fast >= 0)
    {
        cout << fast;
    }
    else
    {
        cout << "not found : ";
    }
}

int main()
{
    vector<int> v = {1, 2, 2, 2, 2, 3, 4, 7, 8, 8};
    cout << " input ";
    int c;
    cin >> c;
    farstlastposition(v, c);

    return 0;
}



// *****...2..Find a Fixed Point (Value equal to index) in a given array

#include <bits/stdc++.h>
using namespace std;

void fixedpoint(vector<int> arr)
{
    for (int i = 0; i < arr.size(); i++)
    {
        if (arr[i] == (i + 1))
        {
            cout << " index " << (i + 1) << " value = " << arr[i];
            break;
        }
    }
}

int main()
{
    vector<int> arr = {3, 23, 45, 4, 87};
    fixedpoint(arr);

    return 0;
}



// *****...3..Search in a rotated sorted array

#include <bits/stdc++.h>
using namespace std;
int binarySearch(int arr[], int low, int high, int key)
{
    if (high < low)
        return -1;

    int mid = (low + high) / 2;
    if (key == arr[mid])
        return mid;

    if (key > arr[mid])
        return binarySearch(arr, (mid + 1), high, key);

    return binarySearch(arr, low, (mid - 1), key);
}

int findPivot(int arr[], int low, int high)
{

    if (high < low)
        return -1;
    if (high == low)
        return low;

    int mid = (low + high) / 2;
    if (mid < high && arr[mid] > arr[mid + 1])
        return mid;

    if (mid > low && arr[mid] < arr[mid - 1])
        return (mid - 1);

    if (arr[low] >= arr[mid])
        return findPivot(arr, low, mid - 1);

    return findPivot(arr, mid + 1, high);
}

int pivotedBinarySearch(int arr[], int n, int key)
{
    int pivot = findPivot(arr, 0, n - 1);

    if (pivot == -1)
        return binarySearch(arr, 0, n - 1, key);

    if (arr[pivot] == key)
        return pivot;

    if (arr[0] <= key)
        return binarySearch(arr, 0, pivot - 1, key);

    return binarySearch(arr, pivot + 1, n - 1, key);
}

int main()
{

    int arr1[] = {4, 5, 6, 7, 0, 1, 2};
    int n = sizeof(arr1) / sizeof(arr1[0]);
    int key;
    cin >> key;

    cout << "Index of the element is : "
         << pivotedBinarySearch(arr1, n, key);

    return 0;
}




// ****...4..square root of an integer


#include <bits/stdc++.h>
using namespace std;

int countSquares(int x)
{
    int sqr = sqrt(x);
    int result = (int)(sqr);
    return result;
}
int main()
{

    int x;
    cin >> x;
    cout << (countSquares(x));

    return 0;
}




// ****...5..Maximum and minimum of an array using minimum number of comparisons
#include <bits/stdc++.h>
using namespace std;

int main()
{
    int arr[] = {1000, 11, 445, 330, 3000};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_val = 0;
    int min_val = arr[0];
    for (int i = 0; i < n; i++)
    {
        min_val = min(min_val, arr[i]);
        max_val = max(max_val, arr[i]);
    }
    cout << "max val = " << max_val << endl
         << "min val = " << min_val;

    return 0;
}




// ****...7..Find the repeating and the missing

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int arr[] = {1, 3, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    unordered_map<int, bool> nums;
    for (int i : arr)
    {
        if (nums.find(i) == nums.end())
        {
            nums[i] = true;
        }
        else
        {
            cout << "Repeating = " << i;
        }
    }
    cout << endl;

    for (int i = 1; i <= n; i++)
    {
        if (nums.find(i) == nums.end())
        {
            cout << "Missing = " << i;
        }
    }

    return 0;
}



