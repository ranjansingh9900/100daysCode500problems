// 1..*******/////....Spiral traversal on a Matrix

#include <bits/stdc++.h>
using namespace std;

#define R 4
#define C 4
void print(int arr[R][C], int i, int j, int m, int n)
{
    if (i >= m or j >= n)
    {
        return;
    }
    for (int p = j; p < n; p++)
    {
        cout << arr[i][p] << " ";
    }
    for (int p = i + 1; p < m; p++)
    {
        cout << arr[p][n - 1] << " ";
    }
    if ((m - 1) != i)
    {
        for (int p = n - 2; p >= j; p--)
        {
            cout << arr[m - 1][p] << " ";
        }
    }
    if ((n - 1) != j)
    {
        for (int p = m - 2; p > i; p--)
        {
            cout << arr[p][j] << " ";
        }
    }
    print(arr, i + 1, j + 1, m - 1, n - 1);
}

int main()
{

    int arr[R][C] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
    print(arr, 0, 0, R, C);

    return 0;
}





// 2..********/////....Search an element in a matriix

#include <bits/stdc++.h>
using namespace std;

bool searchMatrix(vector<vector<int>> &matrix, int target)
{
    int r = 0, c = matrix[0].size() - 1;
    while (r < matrix.size() && c >= 0)
    {
        if (matrix[r][c] == target)
            return true;
        else if (matrix[r][c] < target)
            r++;
        else
            c--;
    }
    return false;
}

int main()
{
    vector<vector<int>> arr = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
    int t;
    cin >> t;
    if (searchMatrix(arr, t))
    {
        cout << "element find = " << t;
    }
    else
    {
        cout << "not find";
    }

    return 0;
}




// *******/////...3.Find median in a row wise sorted matrix

#include <bits/stdc++.h>
using namespace std;

const int MAX = 100;

int binarymedian(int arr[][MAX], int r, int c)
{
    int min = INT_MAX, max = INT_MIN;
    for (int i = 0; i < r; i++)
    {
        if (arr[i][0] < min)
            min = arr[i][0];
        if (arr[i][c - 1] > max)
            max = arr[i][c - 1];
    }
    int desired = (r * c + 1) / 2;
    int place = 0;
    while (min < max)
    {
        int mid = min + (max - min) / 2;
        for (int i = 0; i < r; ++i)
            place += upper_bound(arr[i], arr[i] + c, mid) - arr[i];
        if (place < desired)
            min = mid + 1;
        else
            max = mid;
    }
    return min;
}

int main()
{
    int r = 3, c = 3;
    int arr[][MAX] = {{1, 3, 5}, {2, 6, 9}, {3, 7, 10}};
    cout << binarymedian(arr, r, c);
    return 0;
}




// *******/////...4.Find row with maximum no. of 1's

#include <bits/stdc++.h>
using namespace std;

#define R 4
#define C 4

int rowwithmax1s(bool matrix[R][C])
{
    int row = -1;
    int countmax = 0;
    for (int i = 0; i < R; i++)
    {
        int count = 0;
        for (int j = 0; j < C; j++)
        {
            if (matrix[i][j] == 1)
            {
                count++;
            }
        }
        if (count > countmax)
        {
            countmax == count;
            row = i;
        }
    }
    return row;
}

int main()
{
    bool matrix[R][C] = {{0, 1, 1, 1}, {0, 0, 1, 1}, {1, 1, 1, 1}, {0, 0, 0, 0}};
    cout << " Index of row with maximum 1s is : " << rowwithmax1s(matrix) << endl;

    return 0;
}


// *******/////..5..Print elements in sorted order using row-column wise sorted matrix
#include <bits/stdc++.h>
using namespace std;
#define R 4
#define C 4

void sortted(int arr[R][C], int r, int c)
{
    vector<int> nums;
    for (int i = 0; i < r; i++)
    {
        for (int j = 0; j < c; j++)
        {
            nums.push_back(arr[i][j]);
        }
    }
    sort(nums.begin(), nums.end());

    for (int i = 0; i < nums.size(); i++)
    {
        cout << nums[i] << " ";
    }
}

int main()
{
    int arr[R][C] = {{100, 200, 300, 400}, {15, 25, 35, 45}, {27, 29, 37, 48}, {32, 33, 39, 50}};
    sortted(arr, 4, 4);

    return 0;
}






