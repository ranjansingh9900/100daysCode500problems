******// 1..Reverse the array




#include <iostream>
using namespace std;

void printff(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
        // cout<<endl;
    }
}
// way1
/**void reverseArray(int arr[],int strat ,int end){
    while (strat<end)
    {
        int temp=arr[strat];
        arr[strat]=arr[end];
        arr[end]=temp;
        strat++;
        end--;
    }


}
**/
// way2
void reverseArray(int arr[], int strat, int end)
{
    if (strat >= end)
        return;
    int temp = arr[strat];
    arr[strat] = arr[end];
    arr[end] = temp;
    reverseArray(arr, strat + 1, end - 1);
}

int main()
{

    int arr[] = {10, 20, 3, 4, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    printff(arr, n);

    cout << endl;

    reverseArray(arr, 0, 5);
    cout << endl;

    printff(arr, n);

    return 0;
}






******//Maximum and minimum of an array using minimum number of comparisons



#include <iostream>
using namespace std;

struct Pair
{
    int min;
    int max;
};

Pair getmaxmin(int arr[], int n)
{
    struct Pair minmax;
    int i;
    if (n == 1)
    {
        minmax.min = arr[0];
        minmax.max = arr[0];
        return minmax;
    }
    if (arr[1] > arr[0])
    {
        minmax.max = arr[1];
        minmax.min = arr[0];
    }
    else
    {
        minmax.max = arr[0];
        minmax.min = arr[1];
    }
    for (int i = 2; i < n; i++)
    {
        if (arr[i] > minmax.max)
        {
            minmax.max = arr[i];
        }
        else if (arr[i] < minmax.min)
        {
            minmax.min = arr[i];
        }
    }
    return minmax;
}

int main()
{
    int arr[] = {34, 5, 6, 22, 44, 66, 4, 2};
    int n = sizeof(arr) / sizeof(arr[0]);
    struct Pair minmax=getmaxmin(arr,n);
    cout<<"max element : "<<minmax.max<<endl;
    cout<<"min element : "<<minmax.min;

    return 0;
}






******//Find the "Kth" max and min element of an array 



#include <bits/stdc++.h>
using namespace std;

int kthsmallerElement(int arr[], int n, int k)
{
    sort(arr, arr + n);
    return arr[k - 1];
}
int kthlargestElement(int arr[], int n, int k)
{
    sort(arr, arr + n);
    return arr[n - k];
}

int main()
{

    int arr[] = {0, 4, 55, 77, 3, 66, 7, 8};
    int size = sizeof(arr) / sizeof(arr[0]);
    int k;
    cin >> k;
    cout << "kth smaller element : " << kthsmallerElement(arr, size, k)<<endl;
    cout << "kth lergest element : " << kthlargestElement(arr, size, k);

    return 0;
}




******//..Sort an array of 0s, 1s and 2s 


#include <bits/stdc++.h>
using namespace std;

void display(int arr[], int n)
{
    int i = 0;
    while (i < n)
    {
        cout << arr[i] << " ";
        i++;
    }
}
void sortarr(int arr[], int n)
{
    int count = 0, count1 = 0, count2 = 0;

    for (int i = 0; i < n; i++)
    {
        switch (arr[i])
        {
        case 0:
            count++;
            break;
        case 1:
            count1++;
            break;
        case 2:
            count2++;
            break;
        }
    }
    int i = 0;
    while (count > 0)
    {
        /* code */
        arr[i++] = 0;
        count--;
    }
    while (count1 > 0)
    {
        /* code */
        arr[i++] = 1;
        count1--;
    }
    while (count2 > 0)
    {
        /* code */
        arr[i++] = 2;
        count2--;
    }

    // display(arr,n);
}

int main()
{
    int arr[] = {0, 2, 2, 2, 1, 0, 0, 2, 1, 0, 2};
    int size = sizeof(arr) / sizeof(arr[0]);
    display(arr, size);
    sortarr(arr, size);
    cout << endl;
    display(arr, size);

    return 0;
}



******//....Move all the negative elements to one side of the array 


#include<bits/stdc++.h>
using namespace std;

void arrang(vector<int>&arr){
    sort(arr.begin(),arr.end());
}

int main(){

    vector<int>arr={-1,-3,5,-5,-6,3,0,-10,4,6};
    arrang(arr);
    for(int a:arr){
        cout<<a<<" ";
    }

    return 0;
}








